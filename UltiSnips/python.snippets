#################################################
# Custom Python snippets for google/pocoo style #
#################################################
extends python

#############
# Functions #
#############
global !p

POCOO    = 0x7

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'


class Arg(object):
    def __init__(self, arg):
        self.arg = arg
        self.name = arg.split('=')[0].strip()

    def __str__(self):
        return self.name

    def __unicode__(self):
        return self.name

    def is_kwarg(self):
        return '=' in self.arg


def get_args(arglist):
    args = [Arg(arg) for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg.name != 'self']

    return args


def get_quoting_style(snip):
    style = snip.opt("g:ultisnips_python_quoting_style", "double")
    if style == 'single':
        return SINGLE_QUOTES
    return DOUBLE_QUOTES


def triple_quotes(snip):
    style = snip.opt("g:ultisnips_python_triple_quoting_style")
    if not style:
        return get_quoting_style(snip) * 3
    return (SINGLE_QUOTES if style == 'single' else DOUBLE_QUOTES) * 3


def triple_quotes_handle_trailing(snip, quoting_style):
    """
    Generate triple quoted strings and handle any trailing quote char,
    which might be there from some autoclose/autopair plugin,
    i.e. when expanding ``"|"``.
    """
    if not snip.c:
        # Do this only once, otherwise the following error would happen:
        # RuntimeError: The snippets content did not converge: â€¦
        _, col = vim.current.window.cursor
        line = vim.current.line

        # Handle already existing quote chars after the trigger.
        _ret = quoting_style * 3
        while True:
            try:
                nextc = line[col]
            except IndexError:
                break
            if nextc == quoting_style and len(_ret):
                _ret = _ret[1:]
                col = col+1
            else:
                break
        snip.rv = _ret
    else:
        snip.rv = snip.c


def get_style(snip):
    style = snip.opt("g:ultisnips_python_style", "normal")

    if style == "pocoo": return POCOO
    else: return NORMAL


def format_arg(arg, style, is_kwarg):
    if style == POCOO:
        if is_kwarg:
            return "%s (TODO): TODO optional" % arg
        else:
            return "%s (TODO): TODO" % arg


def format_return(style, snip):
    if style == POCOO:
        snip += 'Returns:'
        snip.shift()
        snip += 'type: TODO'
        snip.unshift()


def write_docstring_args(args, snip):
    if not args:
        snip.rv += ' {0}'.format(triple_quotes(snip))
        return

    snip.rv += '\n' + snip.mkline('', indent='')

    style = get_style(snip)

    if style == POCOO:
        write_pocoo_docstring_args(args, snip)
    else:
        for arg in args:
            snip += format_arg(arg, style)

def write_pocoo_docstring_args(args, snip):
    if args:
        snip += "Args:"
        snip.shift()
    for arg in args:
        if arg.is_kwarg():
            snip += format_arg(arg, POCOO, True)
        else:
            snip += format_arg(arg, POCOO, False)
    snip.unshift()
    snip.rv += '\n' + snip.mkline('', indent='')


def write_init_body(args, parents, clsname, snip):
    parents = [p.strip() for p in parents.split(",")]

    for arg in args:
        snip += "self._%s = %s" % (arg, arg)

    if parents:
        if 'object' in parents:
            snip += "super(%s, self).__init__()" % (clsname)
        else:
            snip += "super(%s, self).__init__() # TODO - pass args to parent class if necessary" % (clsname)


def write_function_docstring(t, is_class, snip):
    """
    Writes a function docstring with the current style.

        t (str): The values of the placeholders
        snip (UltiSnips.TextObjects.SnippetUtil): UltiSnips.TextObjects.SnippetUtil object instance
    """
    snip.rv = ""
    snip >> 1

    args = get_args(t[2])
    if args:
        write_docstring_args(args, snip)

    style = get_style(snip)

    format_return(style, snip)
    snip.rv += '\n' + snip.mkline('', indent='')
    snip += triple_quotes(snip)


def get_dir_and_file_name(snip):
    return os.getcwd().split(os.sep)[-1] + '.' + snip.basename


endglobal

############
# Snippets #
############
snippet simps "Setup our imports"
# Built In

# Third Party

# Custom
endsnippet

snippet simpsd "Setup our imports for django"
# Built In

# Django

# Third Party

# Custom
endsnippet

# Module Docstring
snippet docs "customized pocoo style module doc string" b
# -*- coding: utf-8 -*-
"""
    `!p snip.rv = get_dir_and_file_name(snip)`
    `!p snip.rv = '~' * len(get_dir_and_file_name(snip))`

    ${1:DESCRIPTION}

    :copyright: (c) `date +%Y` by ${2:`!v g:snips_author_name`}.
    :license: ${3:`!v g:snips_default_license`}, see LICENSE for more details.
"""
$0
endsnippet

# New Class
snippet class "class with docstrings" b
class ${1:MyClass}(${2:object}):
    `!p snip.rv = triple_quotes(snip)`${3:Docstring for $1.}`!p args = get_args(t[4])
snip.shift()
write_docstring_args(args, snip)
if args:
    snip += '{0}'.format(triple_quotes(snip))
    snip.unshift()
    `
    def __init__(self$4):`!p
snip >> 2
write_init_body(args, t[2], t[1], snip)
`
        $0
endsnippet

# New Function
snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
    `!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, False, snip) `
    ${5:${VISUAL:return}}
endsnippet
